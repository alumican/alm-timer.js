{"version":3,"file":"index.min.js","sources":["../src/TimerEvent.ts","../src/Timer.ts"],"sourcesContent":["export enum TimerEventType {\n\t/**\n\t * タイマーがカウントしたときに送出されるイベントタイプです。\n\t */\n\ttick = 'tick',\n\n\t/**\n\t * タイマーが設定回数までカウントしたときに送出されるイベントタイプです。\n\t */\n\tcomplete = 'complete',\n}\n\nexport interface TimerEventDetail {\n\t/**\n\t * タイマーの経過時間（ミリ秒）です。\n\t */\n\telapsedCount: number;\n\n\t/**\n\t * タイマーの設定カウント回数です。\n\t */\n\trepeatCount: number;\n\n\t/**\n\t * タイマーの残りカウント回数です。\n\t */\n\trestCount: number;\n}\n\nexport class TimerEvent extends CustomEvent<TimerEventDetail> {\n\t/**\n\t * Timerクラスから送出されるイベントオブジェクトです。\n\t * @param type - 送出されたイベントオブジェクトのイベントタイプです。\n\t * @param options - イベントオブジェクトに付随するプロパティです。\n\t */\n\tconstructor(\n\t\ttype: TimerEventType,\n\t\toptions: CustomEventInit<TimerEventDetail>\n\t) {\n\t\tsuper(type, options);\n\t}\n}\n","import { TimerEvent, TimerEventType } from './TimerEvent';\nimport { DateUtil } from 'alm_coreutil';\n\nexport class Timer extends EventTarget {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\t/**\n\t * 時間間隔と繰り返し回数を指定してタイマーオブジェクトを生成します。\n\t * @param delay - タイマーのカウント間隔（ミリ秒）です。\n\t * @param repeatCount - タイマーの繰り返し回数です。0以下を指定すると無限に繰り返します。\n\t */\n\tconstructor(delay: number = 1000, repeatCount: number = 0) {\n\t\tsuper();\n\t\tthis.delay = delay;\n\t\tthis.repeatCount = repeatCount;\n\t\tthis.isRunning = false;\n\t\tthis.tId = -1;\n\t\tthis.reset();\n\t\tDateUtil.now();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\t/**\n\t * タイマーを実行します。\n\t * タイマーが停止中の場合は停止時の残りの時間から再開します。\n\t */\n\tpublic start(): void {\n\t\tif (this.isRunning) return;\n\t\tthis.isRunning = true;\n\t\tthis.tStartTime = DateUtil.now();\n\t\tthis.startDelay(this.tRestTime !== -1 ? this.tRestTime : this.delay);\n\t}\n\n\t/**\n\t * 起動中のタイマーを一時停止します。\n\t */\n\tpublic stop(): void {\n\t\tif (!this.isRunning) return;\n\t\tthis.isRunning = false;\n\t\tthis.tRestTime = DateUtil.now() - this.tStartTime;\n\t\tthis.stopDelay();\n\t}\n\n\t/**\n\t * タイマーの残り時間および既に繰り返している回数をリセットします。\n\t * 起動中のタイマーは停止されます。\n\t */\n\tpublic reset(): void {\n\t\tthis.stop();\n\t\tthis.elapsedCount = 0;\n\t\tthis.tRestTime = -1;\n\t}\n\n\t/**\n\t * タイマーをリセットした上で開始します。\n\t */\n\tpublic restart(): void {\n\t\tthis.reset();\n\t\tthis.start();\n\t}\n\n\tprivate startDelay(delay: number): void {\n\t\tthis.stopDelay();\n\t\tthis.tDelay = delay;\n\t\tthis.tId = window.setInterval(this.timerHandler, this.tDelay);\n\t}\n\n\tprivate stopDelay(): void {\n\t\tif (this.tId !== -1) {\n\t\t\tclearInterval(this.tId);\n\t\t\tthis.tId = -1;\n\t\t}\n\t}\n\n\tprivate dispatch(eventType: TimerEventType): void {\n\t\tthis.dispatchEvent(\n\t\t\tnew TimerEvent(eventType, {\n\t\t\t\tdetail: {\n\t\t\t\t\telapsedCount: this.elapsedCount,\n\t\t\t\t\trepeatCount: this.repeatCount,\n\t\t\t\t\trestCount: this.getRestCount(),\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate timerHandler = (): void => {\n\t\tthis.tStartTime = DateUtil.now();\n\t\t++this.elapsedCount;\n\t\tlet isCompleted: boolean = false;\n\t\tif (this.repeatCount > 0 && this.elapsedCount >= this.repeatCount) {\n\t\t\tisCompleted = true;\n\t\t\tthis.stop();\n\t\t} else if (this.tDelay !== this.delay) {\n\t\t\tthis.startDelay(this.delay);\n\t\t}\n\t\tthis.dispatch(TimerEventType.tick);\n\t\tif (isCompleted) {\n\t\t\tthis.dispatch(TimerEventType.complete);\n\t\t}\n\t};\n\n\t/**\n\t * タイマーが実行中かどうかを取得します。\n\t * @return - タイマーが実行中の場合はtrue、それ以外の場合はfalseを返します。\n\t */\n\tpublic getIsRunning(): boolean {\n\t\treturn this.isRunning;\n\t}\n\n\t/**\n\t * タイマーのカウント間隔（ミリ秒）を取得します。\n\t * @return - タイマーのカウント間隔（ミリ秒）です。\n\t */\n\tpublic getDelay(): number {\n\t\treturn this.delay;\n\t}\n\n\t/**\n\t * タイマーのカウント間隔（ミリ秒）を設定します。\n\t * @param delay - タイマーのカウント間隔（ミリ秒）です。\n\t */\n\tpublic setDelay(delay: number): void {\n\t\tthis.delay = delay;\n\t}\n\n\t/**\n\t * タイマーの経過時間（ミリ秒）を取得します。\n\t * タイマーがカウントをおこなうごとに0にリセットされます。\n\t * @return - タイマーの経過時間（ミリ秒）です。\n\t */\n\tpublic getElapsedTime(): number {\n\t\treturn DateUtil.now() - this.tStartTime;\n\t}\n\n\t/**\n\t * タイマーが次にカウントをおこなうまでの残り時間（ミリ秒）を取得します。\n\t * @return - タイマーの残り時間（ミリ秒）です。\n\t */\n\tpublic getRestTime(): number {\n\t\treturn this.delay - this.getElapsedTime();\n\t}\n\n\t/**\n\t * タイマーの現在のカウント回数を取得します。\n\t * @return - 現在のカウント回数です。\n\t */\n\tpublic getElapsedCount(): number {\n\t\treturn this.elapsedCount;\n\t}\n\n\t/**\n\t * タイマーの設定されたカウント回数を取得します。\n\t * @return - 設定されたカウント回数です。\n\t */\n\tpublic getRepeatCount(): number {\n\t\treturn this.repeatCount;\n\t}\n\n\t/**\n\t * タイマーの設定されたカウント回数を設定します。\n\t * @param count - 設定されたカウント回数です。\n\t */\n\tpublic setRepeatCount(count: number): void {\n\t\tthis.repeatCount = count;\n\t}\n\n\t/**\n\t * タイマーの残りのカウント回数を設定します。\n\t * @return - 残りのカウント回数です。\n\t */\n\tpublic getRestCount(): number {\n\t\treturn this.repeatCount - this.elapsedCount;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate isRunning: boolean;\n\tprivate delay: number;\n\tprivate elapsedCount: number;\n\tprivate repeatCount: number;\n\tprivate tStartTime: number;\n\tprivate tRestTime: number;\n\tprivate tDelay: number;\n\tprivate tId: number;\n}\n"],"names":["TimerEventType","exports","TimerEvent","CustomEvent","constructor","type","options","super","Timer","EventTarget","delay","repeatCount","this","timerHandler","tStartTime","DateUtil","now","elapsedCount","isCompleted","stop","tDelay","startDelay","dispatch","tick","complete","isRunning","tId","reset","start","tRestTime","stopDelay","restart","window","setInterval","clearInterval","eventType","dispatchEvent","detail","restCount","getRestCount","getIsRunning","getDelay","setDelay","getElapsedTime","getRestTime","getElapsedCount","getRepeatCount","setRepeatCount","count"],"mappings":";sTAAA,IAAYA,EAUXC,EAAAD,oBAAA,GAVWA,EAAAA,mBAAAA,EAAAA,eAUX,CAAA,IANA,KAAA,OAKAA,EAAA,SAAA,WAoBK,MAAOE,UAAmBC,YAM/BC,YACCC,EACAC,GAEAC,MAAMF,EAAMC,EACZ,ECrCI,MAAOE,UAAcC,YAY1BL,YAAYM,EAAgB,IAAMC,EAAsB,GACvDJ,QA+EOK,KAAYC,aAAG,KACtBD,KAAKE,WAAaC,WAASC,QACzBJ,KAAKK,aACP,IAAIC,GAAuB,EACvBN,KAAKD,YAAc,GAAKC,KAAKK,cAAgBL,KAAKD,aACrDO,GAAc,EACdN,KAAKO,QACKP,KAAKQ,SAAWR,KAAKF,OAC/BE,KAAKS,WAAWT,KAAKF,OAEtBE,KAAKU,SAAStB,iBAAeuB,MACzBL,GACHN,KAAKU,SAAStB,iBAAewB,SAC7B,EA3FDZ,KAAKF,MAAQA,EACbE,KAAKD,YAAcA,EACnBC,KAAKa,WAAY,EACjBb,KAAKc,KAAO,EACZd,KAAKe,QACLZ,EAAQA,SAACC,KACT,CAYMY,QACFhB,KAAKa,YACTb,KAAKa,WAAY,EACjBb,KAAKE,WAAaC,WAASC,MAC3BJ,KAAKS,YAA+B,IAApBT,KAAKiB,UAAmBjB,KAAKiB,UAAYjB,KAAKF,OAC9D,CAKMS,OACDP,KAAKa,YACVb,KAAKa,WAAY,EACjBb,KAAKiB,UAAYd,EAAQA,SAACC,MAAQJ,KAAKE,WACvCF,KAAKkB,YACL,CAMMH,QACNf,KAAKO,OACLP,KAAKK,aAAe,EACpBL,KAAKiB,WAAa,CAClB,CAKME,UACNnB,KAAKe,QACLf,KAAKgB,OACL,CAEOP,WAAWX,GAClBE,KAAKkB,YACLlB,KAAKQ,OAASV,EACdE,KAAKc,IAAMM,OAAOC,YAAYrB,KAAKC,aAAcD,KAAKQ,OACtD,CAEOU,aACW,IAAdlB,KAAKc,MACRQ,cAActB,KAAKc,KACnBd,KAAKc,KAAO,EAEb,CAEOJ,SAASa,GAChBvB,KAAKwB,cACJ,IAAIlC,EAAWiC,EAAW,CACzBE,OAAQ,CACPpB,aAAcL,KAAKK,aACnBN,YAAaC,KAAKD,YAClB2B,UAAW1B,KAAK2B,kBAInB,CAsBMC,eACN,OAAO5B,KAAKa,SACZ,CAMMgB,WACN,OAAO7B,KAAKF,KACZ,CAMMgC,SAAShC,GACfE,KAAKF,MAAQA,CACb,CAOMiC,iBACN,OAAO5B,WAASC,MAAQJ,KAAKE,UAC7B,CAMM8B,cACN,OAAOhC,KAAKF,MAAQE,KAAK+B,gBACzB,CAMME,kBACN,OAAOjC,KAAKK,YACZ,CAMM6B,iBACN,OAAOlC,KAAKD,WACZ,CAMMoC,eAAeC,GACrBpC,KAAKD,YAAcqC,CACnB,CAMMT,eACN,OAAO3B,KAAKD,YAAcC,KAAKK,YAC/B"}