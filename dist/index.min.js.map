{"version":3,"file":"index.min.js","sources":["../src/TimerEvent.ts","../src/Timer.ts"],"sourcesContent":["export enum TimerEventType {\n\ttick = 'tick',\n\tcomplete = 'complete',\n}\n\nexport interface TimerEventDetail {\n\telapsedCount:number;\n\trepeatCount:number;\n\trestCount:number;\n}\n\nexport class TimerEvent extends CustomEvent<TimerEventDetail> {\n\tconstructor(type:TimerEventType, options:CustomEventInit<TimerEventDetail>) {\n\t\tsuper(type, options);\n\t}\n}\n","import {TimerEvent, TimerEventType} from \"./TimerEvent\";\nimport {DateUtil} from \"alm\";\n\nexport class Timer extends EventTarget {\n\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(interval:number = 1000, repeatCount:number = 0) {\n\t\tsuper();\n\t\tthis.interval = interval;\n\t\tthis.repeatCount = repeatCount;\n\t\tthis.isRunning = false;\n\t\tthis.tId = -1;\n\t\tthis.reset();\n\t\tDateUtil.now();\n\t}\n\n\n\n\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic start():void {\n\t\tif (this.isRunning) return;\n\t\tthis.isRunning = true;\n\t\tthis.tStartTime = DateUtil.now();\n\t\tthis.startInterval(this.tRestTime !== -1 ? this.tRestTime : this.interval);\n\t}\n\n\tpublic stop():void {\n\t\tif (!this.isRunning) return;\n\t\tthis.isRunning = false;\n\t\tthis.tRestTime = DateUtil.now() - this.tStartTime;\n\t\tthis.stopInterval();\n\t}\n\n\tpublic reset():void {\n\t\tthis.stop();\n\t\tthis.elapsedCount = 0;\n\t\tthis.tRestTime = -1;\n\t}\n\n\tpublic restart():void {\n\t\tthis.reset();\n\t\tthis.start();\n\t}\n\n\n\n\n\n\tprivate startInterval(interval:number):void {\n\t\tthis.stopInterval();\n\t\tthis.tInterval = interval;\n\t\tthis.tId = window.setInterval(this.timerHandler, this.tInterval);\n\t}\n\n\tprivate stopInterval():void {\n\t\tif (this.tId !== -1) {\n\t\t\tclearInterval(this.tId);\n\t\t\tthis.tId = -1;\n\t\t}\n\t}\n\n\tprivate dispatch(eventType:TimerEventType):void {\n\t\tthis.dispatchEvent(new TimerEvent(eventType, { detail: {\n\t\t\t\telapsedCount: this.elapsedCount,\n\t\t\t\trepeatCount: this.repeatCount,\n\t\t\t\trestCount: this.getRestCount(),\n\t\t\t}}));\n\t}\n\n\tprivate timerHandler = ():void => {\n\t\tthis.tStartTime = DateUtil.now();\n\t\t++this.elapsedCount;\n\t\tlet isCompleted:boolean = false;\n\t\tif (this.repeatCount > 0 && this.elapsedCount >= this.repeatCount) {\n\t\t\tisCompleted = true;\n\t\t\tthis.stop();\n\t\t} else if (this.tInterval !== this.interval) {\n\t\t\tthis.startInterval(this.interval);\n\t\t}\n\t\tthis.dispatch(TimerEventType.tick);\n\t\tif (isCompleted) {\n\t\t\tthis.dispatch(TimerEventType.complete);\n\t\t}\n\t};\n\n\n\n\n\n\tpublic getIsRunning():boolean {\n\t\treturn this.isRunning;\n\t}\n\n\tpublic getInterval():number {\n\t\treturn this.interval;\n\t}\n\n\tpublic setInterval(interval:number):void {\n\t\tthis.interval = interval;\n\t}\n\n\tpublic getElapsedTime():number {\n\t\treturn DateUtil.now() - this.tStartTime;\n\t}\n\n\tpublic getRestTime():number {\n\t\treturn this.interval - this.getElapsedTime();\n\t}\n\n\tpublic getElapsedCount():number {\n\t\treturn this.elapsedCount;\n\t}\n\n\tpublic getRepeatCount():number {\n\t\treturn this.repeatCount;\n\t}\n\n\tpublic setRepeatCount(count:number):void {\n\t\tthis.repeatCount = count;\n\t}\n\n\tpublic getRestCount():number {\n\t\treturn this.repeatCount - this.elapsedCount;\n\t}\n\n\n\n\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate isRunning:boolean;\n\tprivate interval:number;\n\tprivate elapsedCount:number;\n\tprivate repeatCount:number;\n\tprivate tStartTime:number;\n\tprivate tRestTime:number;\n\tprivate tInterval:number;\n\tprivate tId:number;\n}\n"],"names":["TimerEventType","exports","TimerEvent","CustomEvent","constructor","type","options","super","Timer","EventTarget","interval","repeatCount","this","timerHandler","tStartTime","DateUtil","now","elapsedCount","isCompleted","stop","tInterval","startInterval","dispatch","tick","complete","isRunning","tId","reset","start","tRestTime","stopInterval","restart","window","setInterval","clearInterval","eventType","dispatchEvent","detail","restCount","getRestCount","getIsRunning","getInterval","getElapsedTime","getRestTime","getElapsedCount","getRepeatCount","setRepeatCount","count"],"mappings":";+QAAA,IAAYA,EAGXC,EAAAD,oBAAA,GAHWA,EAAAA,mBAAAA,EAAAA,eAGX,CAAA,IAFA,KAAA,OACAA,EAAA,SAAA,WASK,MAAOE,UAAmBC,YAC/BC,YAAYC,EAAqBC,GAChCC,MAAMF,EAAMC,EACZ,ECXI,MAAOE,UAAcC,YAQ1BL,YAAYM,EAAkB,IAAMC,EAAqB,GACxDJ,QAqEOK,KAAYC,aAAG,KACtBD,KAAKE,WAAaC,WAASC,QACzBJ,KAAKK,aACP,IAAIC,GAAsB,EACtBN,KAAKD,YAAc,GAAKC,KAAKK,cAAgBL,KAAKD,aACrDO,GAAc,EACdN,KAAKO,QACKP,KAAKQ,YAAcR,KAAKF,UAClCE,KAAKS,cAAcT,KAAKF,UAEzBE,KAAKU,SAAStB,iBAAeuB,MACzBL,GACHN,KAAKU,SAAStB,iBAAewB,SAC7B,EAjFDZ,KAAKF,SAAWA,EAChBE,KAAKD,YAAcA,EACnBC,KAAKa,WAAY,EACjBb,KAAKc,KAAO,EACZd,KAAKe,QACLZ,EAAQA,SAACC,KACT,CAYMY,QACFhB,KAAKa,YACTb,KAAKa,WAAY,EACjBb,KAAKE,WAAaC,WAASC,MAC3BJ,KAAKS,eAAkC,IAApBT,KAAKiB,UAAmBjB,KAAKiB,UAAYjB,KAAKF,UACjE,CAEMS,OACDP,KAAKa,YACVb,KAAKa,WAAY,EACjBb,KAAKiB,UAAYd,EAAQA,SAACC,MAAQJ,KAAKE,WACvCF,KAAKkB,eACL,CAEMH,QACNf,KAAKO,OACLP,KAAKK,aAAe,EACpBL,KAAKiB,WAAa,CAClB,CAEME,UACNnB,KAAKe,QACLf,KAAKgB,OACL,CAMOP,cAAcX,GACrBE,KAAKkB,eACLlB,KAAKQ,UAAYV,EACjBE,KAAKc,IAAMM,OAAOC,YAAYrB,KAAKC,aAAcD,KAAKQ,UACtD,CAEOU,gBACW,IAAdlB,KAAKc,MACRQ,cAActB,KAAKc,KACnBd,KAAKc,KAAO,EAEb,CAEOJ,SAASa,GAChBvB,KAAKwB,cAAc,IAAIlC,EAAWiC,EAAW,CAAEE,OAAQ,CACrDpB,aAAcL,KAAKK,aACnBN,YAAaC,KAAKD,YAClB2B,UAAW1B,KAAK2B,kBAElB,CAsBMC,eACN,OAAO5B,KAAKa,SACZ,CAEMgB,cACN,OAAO7B,KAAKF,QACZ,CAEMuB,YAAYvB,GAClBE,KAAKF,SAAWA,CAChB,CAEMgC,iBACN,OAAO3B,WAASC,MAAQJ,KAAKE,UAC7B,CAEM6B,cACN,OAAO/B,KAAKF,SAAWE,KAAK8B,gBAC5B,CAEME,kBACN,OAAOhC,KAAKK,YACZ,CAEM4B,iBACN,OAAOjC,KAAKD,WACZ,CAEMmC,eAAeC,GACrBnC,KAAKD,YAAcoC,CACnB,CAEMR,eACN,OAAO3B,KAAKD,YAAcC,KAAKK,YAC/B"}