{"version":3,"file":"index.min.js","sources":["../src/TimerEvent.ts","../src/Timer.ts"],"sourcesContent":["export enum TimerEventType {\n\t/**\n\t * タイマーがカウントしたときに送出されるイベントタイプです。\n\t */\n\tcount = 'count',\n\n\t/**\n\t * タイマーが設定回数までカウントしたときに送出されるイベントタイプです。\n\t */\n\tcomplete = 'complete',\n\n\t/**\n\t * タイマーを開始したときに送出されるイベントタイプです。\n\t */\n\tstart = 'start',\n\n\t/**\n\t * タイマーを停止したときに送出されるイベントタイプです。\n\t */\n\tstop = 'stop',\n\n\t/**\n\t * タイマーをリセットしたときに送出されるイベントタイプです。\n\t */\n\treset = 'reset',\n}\n\nexport interface TimerEventDetail {\n\t/**\n\t * タイマーの経過時間（ミリ秒）です。\n\t */\n\telapsedCount: number;\n\n\t/**\n\t * タイマーの設定カウント回数です。\n\t */\n\trepeatCount: number;\n\n\t/**\n\t * タイマーの残りカウント回数です。\n\t */\n\trestCount: number;\n}\n\nexport class TimerEvent extends CustomEvent<TimerEventDetail> {\n\t/**\n\t * Timerクラスから送出されるイベントオブジェクトです。\n\t * @param type - 送出されたイベントオブジェクトのイベントタイプです。\n\t * @param options - イベントオブジェクトに付随するプロパティです。\n\t */\n\tconstructor(type: TimerEventType, options: CustomEventInit<TimerEventDetail>) {\n\t\tsuper(type, options);\n\t}\n}\n","import { TimerEvent, TimerEventType } from './TimerEvent';\nimport { DateUtil } from 'alm_coreutil';\n\n/**\n * 指定した時間だけ遅延させて処理をおこなうためのクラスです。\n * 遅延時間と繰り返し回数を指定することができます。\n */\nexport class Timer extends EventTarget {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\t/**\n\t * 遅延と繰り返し回数を指定してタイマーオブジェクトを生成します。\n\t * @param delay - タイマーの遅延（ミリ秒）です。\n\t * @param repeatCount - タイマーの繰り返し回数です。0以下を指定すると無限に繰り返します。\n\t */\n\tconstructor(delay: number = 1000, repeatCount: number = 0) {\n\t\tsuper();\n\t\tthis.delay = delay;\n\t\tthis.repeatCount = repeatCount;\n\t\tthis.isRunning = false;\n\t\tthis.isComplete = false;\n\t\tthis.tId = -1;\n\t\tthis.reset();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\t/**\n\t * タイマーを実行します。\n\t * タイマーが停止中の場合は停止時の残りの時間から再開します。\n\t */\n\tpublic start(): void {\n\t\tif (this.isComplete) return;\n\t\tif (this.isRunning) return;\n\t\tthis.isRunning = true;\n\t\tthis.tStartTime = this.tRestTime !== -1 ? DateUtil.now() - this.tElapsedTime : DateUtil.now();\n\t\tthis.startDelay(this.tRestTime !== -1 ? this.tRestTime : this.delay);\n\t\tthis.dispatch(TimerEventType.start);\n\t}\n\n\t/**\n\t * 起動中のタイマーを一時停止します。\n\t */\n\tpublic stop(): void {\n\t\tif (!this.isRunning) return;\n\t\tthis.stopInternal();\n\t\tthis.dispatch(TimerEventType.stop);\n\t}\n\n\tprivate stopInternal(): void {\n\t\tif (!this.isRunning) return;\n\t\tthis.isRunning = false;\n\t\tthis.tElapsedTime = DateUtil.now() - this.tStartTime;\n\t\tthis.tRestTime = this.delay - this.tElapsedTime;\n\t\tthis.stopDelay();\n\t}\n\n\t/**\n\t * タイマーの残り時間および既に繰り返している回数をリセットします。\n\t * 起動中のタイマーは停止されます。\n\t */\n\tpublic reset(): void {\n\t\tthis.stopInternal();\n\t\tthis.isComplete = false;\n\t\tthis.elapsedCount = 0;\n\t\tthis.tStartTime = 0;\n\t\tthis.tElapsedTime = 0;\n\t\tthis.tRestTime = -1;\n\t\tthis.dispatch(TimerEventType.reset);\n\t}\n\n\t/**\n\t * タイマーをリセットした上で開始します。\n\t */\n\tpublic restart(): void {\n\t\tthis.reset();\n\t\tthis.start();\n\t}\n\n\t/**\n\t * setInterval制御\n\t */\n\tprivate startDelay(delay: number): void {\n\t\tthis.stopDelay();\n\t\tthis.tDelay = delay;\n\t\tthis.tId = window.setInterval(this.timerHandler, this.tDelay);\n\t}\n\n\tprivate stopDelay(): void {\n\t\tif (this.tId !== -1) {\n\t\t\tclearInterval(this.tId);\n\t\t\tthis.tId = -1;\n\t\t}\n\t}\n\n\tprivate timerHandler = (): void => {\n\t\t++this.elapsedCount;\n\t\tlet isComplete: boolean = false;\n\t\tif (this.repeatCount > 0 && this.elapsedCount >= this.repeatCount) {\n\t\t\tisComplete = true;\n\t\t\tthis.isRunning = false;\n\t\t\tthis.tElapsedTime = this.tDelay;\n\t\t\tthis.stopDelay();\n\t\t} else {\n\t\t\tthis.tStartTime = DateUtil.now();\n\t\t\tif (this.tDelay !== this.delay) {\n\t\t\t\tthis.startDelay(this.delay);\n\t\t\t}\n\t\t}\n\t\tthis.dispatch(TimerEventType.count);\n\t\tif (isComplete) {\n\t\t\tthis.isComplete = true;\n\t\t\tthis.dispatch(TimerEventType.complete);\n\t\t}\n\t};\n\n\t/**\n\t * イベント管理\n\t */\n\tprivate dispatch(eventType: TimerEventType): void {\n\t\tthis.dispatchEvent(\n\t\t\tnew TimerEvent(eventType, {\n\t\t\t\tdetail: {\n\t\t\t\t\telapsedCount: this.elapsedCount,\n\t\t\t\t\trepeatCount: this.repeatCount,\n\t\t\t\t\trestCount: this.getRestCount(),\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * タイマーが実行中かどうかを取得します。\n\t * @return - タイマーが実行中の場合はtrue、それ以外の場合はfalseを返します。\n\t */\n\tpublic getIsRunning(): boolean {\n\t\treturn this.isRunning;\n\t}\n\n\t/**\n\t * タイマーが完了済みかどうかを取得します。\n\t * @return - タイマーが完了済みの場合はtrue、それ以外の場合はfalseを返します。\n\t */\n\tpublic getIsComplete(): boolean {\n\t\treturn this.isComplete;\n\t}\n\n\t/**\n\t * タイマーのカウント間隔（ミリ秒）を取得します。\n\t * @return - タイマーのカウント間隔（ミリ秒）です。\n\t */\n\tpublic getDelay(): number {\n\t\treturn this.delay;\n\t}\n\n\t/**\n\t * タイマーのカウント間隔（ミリ秒）を設定します。\n\t * @param delay - タイマーのカウント間隔（ミリ秒）です。\n\t */\n\tpublic setDelay(delay: number): void {\n\t\tthis.delay = delay;\n\t}\n\n\t/**\n\t * タイマーの経過時間（ミリ秒）を取得します。\n\t * タイマーがカウントをおこなうごとに0にリセットされます。\n\t * @return - タイマーの経過時間（ミリ秒）です。\n\t */\n\tpublic getElapsedTime(): number {\n\t\treturn this.isRunning ? DateUtil.now() - this.tStartTime : this.tElapsedTime;\n\t}\n\n\t/**\n\t * タイマーが次にカウントをおこなうまでの残り時間（ミリ秒）を取得します。\n\t * @return - タイマーの残り時間（ミリ秒）です。\n\t */\n\tpublic getRestTime(): number {\n\t\treturn this.delay - this.getElapsedTime();\n\t}\n\n\t/**\n\t * タイマーの現在のカウント回数を取得します。\n\t * @return - 現在のカウント回数です。\n\t */\n\tpublic getElapsedCount(): number {\n\t\treturn this.elapsedCount;\n\t}\n\n\t/**\n\t * タイマーの設定されたカウント回数を取得します。\n\t * @return - 設定されたカウント回数です。\n\t */\n\tpublic getRepeatCount(): number {\n\t\treturn this.repeatCount;\n\t}\n\n\t/**\n\t * タイマーの設定されたカウント回数を設定します。\n\t * @param count - 設定されたカウント回数です。\n\t */\n\tpublic setRepeatCount(count: number): void {\n\t\tthis.repeatCount = count;\n\t}\n\n\t/**\n\t * タイマーの残りのカウント回数を設定します。\n\t * @return - 残りのカウント回数です。\n\t */\n\tpublic getRestCount(): number {\n\t\treturn this.repeatCount - this.elapsedCount;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate isRunning: boolean;\n\tprivate isComplete: boolean;\n\tprivate delay: number;\n\tprivate elapsedCount: number;\n\tprivate repeatCount: number;\n\tprivate tStartTime: number;\n\tprivate tElapsedTime: number;\n\tprivate tRestTime: number;\n\tprivate tDelay: number;\n\tprivate tId: number;\n}\n"],"names":["TimerEventType","exports","TimerEvent","CustomEvent","constructor","type","options","super","Timer","EventTarget","delay","repeatCount","this","timerHandler","elapsedCount","isComplete","isRunning","tElapsedTime","tDelay","stopDelay","tStartTime","DateUtil","now","startDelay","dispatch","count","complete","tId","reset","start","tRestTime","stop","stopInternal","restart","window","setInterval","clearInterval","eventType","dispatchEvent","detail","restCount","getRestCount","getIsRunning","getIsComplete","getDelay","setDelay","getElapsedTime","getRestTime","getElapsedCount","getRepeatCount","setRepeatCount"],"mappings":";sTAAA,IAAYA,EAyBXC,EAAAD,oBAAA,GAzBWA,EAAAA,mBAAAA,EAAAA,eAyBX,CAAA,IArBA,MAAA,QAKAA,EAAA,SAAA,WAKAA,EAAA,MAAA,QAKAA,EAAA,KAAA,OAKAA,EAAA,MAAA,QAoBK,MAAOE,UAAmBC,YAM/BC,YAAYC,EAAsBC,GACjCC,MAAMF,EAAMC,EACZ,EC7CI,MAAOE,UAAcC,YAY1BL,YAAYM,EAAgB,IAAMC,EAAsB,GACvDJ,QAmFOK,KAAYC,aAAG,OACpBD,KAAKE,aACP,IAAIC,GAAsB,EACtBH,KAAKD,YAAc,GAAKC,KAAKE,cAAgBF,KAAKD,aACrDI,GAAa,EACbH,KAAKI,WAAY,EACjBJ,KAAKK,aAAeL,KAAKM,OACzBN,KAAKO,cAELP,KAAKQ,WAAaC,WAASC,MACvBV,KAAKM,SAAWN,KAAKF,OACxBE,KAAKW,WAAWX,KAAKF,QAGvBE,KAAKY,SAASxB,iBAAeyB,OACzBV,IACHH,KAAKG,YAAa,EAClBH,KAAKY,SAASxB,iBAAe0B,UAC7B,EApGDd,KAAKF,MAAQA,EACbE,KAAKD,YAAcA,EACnBC,KAAKI,WAAY,EACjBJ,KAAKG,YAAa,EAClBH,KAAKe,KAAO,EACZf,KAAKgB,OACL,CAYMC,QACFjB,KAAKG,YACLH,KAAKI,YACTJ,KAAKI,WAAY,EACjBJ,KAAKQ,YAAiC,IAApBR,KAAKkB,UAAmBT,EAAAA,SAASC,MAAQV,KAAKK,aAAeI,EAAQA,SAACC,MACxFV,KAAKW,YAA+B,IAApBX,KAAKkB,UAAmBlB,KAAKkB,UAAYlB,KAAKF,OAC9DE,KAAKY,SAASxB,iBAAe6B,OAC7B,CAKME,OACDnB,KAAKI,YACVJ,KAAKoB,eACLpB,KAAKY,SAASxB,iBAAe+B,MAC7B,CAEOC,eACFpB,KAAKI,YACVJ,KAAKI,WAAY,EACjBJ,KAAKK,aAAeI,EAAQA,SAACC,MAAQV,KAAKQ,WAC1CR,KAAKkB,UAAYlB,KAAKF,MAAQE,KAAKK,aACnCL,KAAKO,YACL,CAMMS,QACNhB,KAAKoB,eACLpB,KAAKG,YAAa,EAClBH,KAAKE,aAAe,EACpBF,KAAKQ,WAAa,EAClBR,KAAKK,aAAe,EACpBL,KAAKkB,WAAa,EAClBlB,KAAKY,SAASxB,iBAAe4B,MAC7B,CAKMK,UACNrB,KAAKgB,QACLhB,KAAKiB,OACL,CAKON,WAAWb,GAClBE,KAAKO,YACLP,KAAKM,OAASR,EACdE,KAAKe,IAAMO,OAAOC,YAAYvB,KAAKC,aAAcD,KAAKM,OACtD,CAEOC,aACW,IAAdP,KAAKe,MACRS,cAAcxB,KAAKe,KACnBf,KAAKe,KAAO,EAEb,CA0BOH,SAASa,GAChBzB,KAAK0B,cACJ,IAAIpC,EAAWmC,EAAW,CACzBE,OAAQ,CACPzB,aAAcF,KAAKE,aACnBH,YAAaC,KAAKD,YAClB6B,UAAW5B,KAAK6B,kBAInB,CAMMC,eACN,OAAO9B,KAAKI,SACZ,CAMM2B,gBACN,OAAO/B,KAAKG,UACZ,CAMM6B,WACN,OAAOhC,KAAKF,KACZ,CAMMmC,SAASnC,GACfE,KAAKF,MAAQA,CACb,CAOMoC,iBACN,OAAOlC,KAAKI,UAAYK,WAASC,MAAQV,KAAKQ,WAAaR,KAAKK,YAChE,CAMM8B,cACN,OAAOnC,KAAKF,MAAQE,KAAKkC,gBACzB,CAMME,kBACN,OAAOpC,KAAKE,YACZ,CAMMmC,iBACN,OAAOrC,KAAKD,WACZ,CAMMuC,eAAezB,GACrBb,KAAKD,YAAcc,CACnB,CAMMgB,eACN,OAAO7B,KAAKD,YAAcC,KAAKE,YAC/B"}